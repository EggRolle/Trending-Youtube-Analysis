# -*- coding: utf-8 -*-
"""Project Part 2 - Tasks 1-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16gQDMxIW8L6lwA6t6llb0aXKOb1Jt9Y0

For Task 1 and 2. Nophil M. 217395609

Task 1:
"""

import csv
import matplotlib.pyplot as plt
import calendar
import numpy as np
import random
import statistics
import scipy.stats as stats

from sklearn.preprocessing import MinMaxScaler
from scipy.interpolate import make_interp_spline, BSpline

#Importing data

with open('CAvideos.csv', newline = '') as csvf:
  reader = csv.reader(csvf)
  caVideos = list(reader)

with open('USvideos.csv', newline = '') as csvf:
  reader = csv.reader(csvf)
  usVideos = list(reader)

with open('FRvideos.csv', newline = '') as csvf:
  reader = csv.reader(csvf)
  jpVideos = list(reader)


print(caVideos[1][2])

monthViews = []

#Removing labels from data
caVideos.pop(0)
usVideos.pop(0)
jpVideos.pop(0)

"""Task 1:"""

#Getting information on each country by month

monthDict = {
    "January": 0,
    "February": 0,
    "March": 0,
    "April": 0,
    "May": 0,
    "June": 0,
    "July": 0,
    "August": 0,
    "September": 0,
    "October": 0,
    "November": 0,
    "December": 0,
}

x = 0

for video in caVideos:
  month = video[1]
  month = month[len(month)-2:]
  
  monthName = calendar.month_name[int(month)]
  views = video[7]

  monthViews.append((monthName, views))
  monthDict[monthName] = monthDict[monthName] + int(views)
  x = x+1

print(monthDict)


#Plotting out monthly information

xnew = np.linspace(1,12, 300)

listy = list(monthDict.values())

spl = make_interp_spline([1,2,3,4,5,6,7,8,9,10,11,12],listy , k=3)

power_smooth = spl(xnew)

plt.plot(xnew, power_smooth)

xes = list(monthDict.keys())
xes.insert(0, "")

plt.xticks(range(13), xes)
plt.title("Total viewership by month")
plt.ylabel("Number of views")
plt.xlabel("Month")


plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_color('#DDDDDD')
plt.gca().set_axisbelow(True)
plt.gca().yaxis.grid(True, color='#D3D3D3')
plt.gca().xaxis.grid(False)
plt.setp(plt.gca().get_xticklabels(), rotation=30, horizontalalignment='right')




#Month views again, with relevant months

monthDict = {
    "November": 0,
    "December": 0,
    "January": 0,
    "February": 0,
    "March": 0,
    "April": 0,
    "May": 0,
    "June": 0,
    
}

for video in caVideos:
  month = video[1]
  month = month[len(month)-2:]
  
  monthName = calendar.month_name[int(month)]
  views = video[7]

  monthViews.append((monthName, views))
  monthDict[monthName] = monthDict[monthName] + int(views)
  x = x+1

print(monthDict)


#NEXT

#Correcting Outlier months

monthDict["November"] += monthDict["November"]
monthDict["June"] += monthDict["June"]


#Plotting monthly statistics
plt.figure()

xnew = np.linspace(1,8, 30)

listy = list(monthDict.values())

spl = make_interp_spline([1,2,3,4,5,6,7,8],listy , k=3)

power_smooth = spl(xnew)

plt.plot(xnew, power_smooth)

xes = list(monthDict.keys())
xes.insert(0, "")

plt.xticks(range(9), xes)

plt.title("Total viewership by month (domain corrected)")
plt.ylabel("Number of views")
plt.xlabel("Month")

plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_color('#DDDDDD')
plt.gca().set_axisbelow(True)
plt.gca().yaxis.grid(True, color='#D3D3D3')
plt.gca().xaxis.grid(False)
plt.setp(plt.gca().get_xticklabels(), rotation=30, horizontalalignment='right')


#plt.figure()

#plt.plot(range(8), list(monthDict.values()))




#Next do category of videos compared by countries, Canada, USA, one more. Pie chart could be good. Make graphs relevant to part 1 questions.

#PLot views, once fucked once unfucked

#Table of most popular category by month

mostPopularCat = []

categoryCountDict = {
    "November": [0,0,0,0,0],
    "December": [0,0,0,0,0],
    "January": [0,0,0,0,0],
    "February": [0,0,0,0,0],
    "March": [0,0,0,0,0],
    "April": [0,0,0,0,0],
    "May": [0,0,0,0,0],
    "June": [0,0,0,0,0],
    
}

for video in caVideos:
  month = video[1]
  month = month[len(month)-2:]
  
  monthName = calendar.month_name[int(month)]
  if int(video[4]) == 24:
    categoryCountDict[monthName][0] += 1
  elif int(video[4]) == 10:
    categoryCountDict[monthName][1] += 1
  elif int(video[4]) == 23:
    categoryCountDict[monthName][2] += 1
  elif int(video[4]) == 25:
    categoryCountDict[monthName][3] += 1
  elif int(video[4]) == 22:
    categoryCountDict[monthName][4] += 1

print(categoryCountDict)

data = [
        ['hi', 'g', 'g'],
        ['1','2','3']
]
plt.figure()



#Bar graph of likes and dislikes next to eachtoher for every country


#Getting like/dislike values for every country


#CANADA
totalDislikesCA = 0
totalLikesCA = 0
smallest = 9999999999
largest = 0
totalCount = 0
allDislikes = []

for video in caVideos:
  totalDislikesCA = totalDislikesCA + int(video[9])
  totalCount = totalCount + int(video[7])
  allDislikes.append(int(video[9]))
  totalLikesCA += int(video[8])
  if int(video[9]) < smallest:
    smallest = int(video[9])
  elif int(video[9]) > largest:
    largest = int(video[9])

meanDislikesCA = totalDislikesCA / len(caVideos)

##totalDislikesCA = totalDislikes

totalCountCA = totalCount

smallestCA = smallest

largestCA = largest

#US
totalDislikesUS = 0
totalLikesUS = 0
smallest = 9999999999
largest = 0
totalCount = 0
allDislikesUS = []

for video in usVideos:
  totalDislikesUS = totalDislikesUS + int(video[9])
  totalCount = totalCount + int(video[7])
  allDislikesUS.append(int(video[9]))
  totalLikesUS += int(video[8])

  if int(video[9]) < smallest:
    smallest = int(video[9])
  elif int(video[9]) > largest:
    largest = int(video[9])

meanDislikesUS = totalDislikesUS / len(caVideos)

#totalDislikesUS = totalDislikes

totalCountUS = totalCount

smallestUS = smallest

largestUS = largest

#France


totalDislikesJP = 0
#totalLikes = 0
smallest = 9999999999
largest = 0
totalCount = 0
allDislikesJP = []
totalLikesFR = 0

for video in jpVideos:
  totalDislikesJP = totalDislikesJP + int(video[9])
  totalCount = totalCount + int(video[7])
  allDislikesJP.append(int(video[9]))
  totalLikesFR += int(video[8])
  if int(video[9]) < smallest:
    smallest = int(video[9])
  elif int(video[9]) > largest:
    largest = int(video[9])

meanDislikesJP = totalDislikesJP / len(caVideos)

#totalDislikesJP = totalDislikes

totalCountJP = totalCount

smallestJP = smallest

largestJP = largest

#Graphing the results, Bar Graph

plt.figure()

values = [meanDislikesCA, meanDislikesUS, meanDislikesJP]

b5 = plt.bar(range(len(values)), values)

for bar in b5:
  if(bar.get_height() >= 0):
      plt.gca().text(
      bar.get_x() + bar.get_width() / 2,
      bar.get_height() + 2,
      round(bar.get_height(), 1),
      horizontalalignment='center',
      color='black',
      weight='bold'
      )

plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_color('#DDDDDD')
plt.gca().set_axisbelow(True)
plt.gca().yaxis.grid(True, color='#D3D3D3')
plt.gca().xaxis.grid(False)

plt.ylabel("Dislikes")

plt.xticks(range(len(["Canada", "US", "France"])), ["Canada", "US", "France"])


plt.gca().get_yaxis().get_major_formatter().set_scientific(False)

plt.title("Mean dislikes on trending videos between countries")

b5[0].set_color('r')

b5[2].set_color('y')

plt.draw()


#Ratios of likes to dislikes bar graph




plt.figure()

values = [totalLikesCA/totalDislikesCA, totalLikesUS/totalDislikesUS, totalLikesFR/totalDislikesJP]

b5 = plt.bar(range(len(values)), values)

for bar in b5:
  if(bar.get_height() >= 0):
      plt.gca().text(
      bar.get_x() + bar.get_width() / 2,
      bar.get_height(),
      round(bar.get_height(), 1),
      horizontalalignment='center',
      color='black',
      weight='bold'
      )

plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_color('#DDDDDD')
plt.gca().set_axisbelow(True)
plt.gca().yaxis.grid(True, color='#D3D3D3')
plt.gca().xaxis.grid(False)

plt.ylabel("Dislikes")

plt.xticks(range(len(["Canada", "US", "France"])), ["Canada", "US", "France"])


plt.gca().get_yaxis().get_major_formatter().set_scientific(False)

plt.title("Mean like/dislike ratio on trending videos between countries")

b5[0].set_color('r')

b5[2].set_color('y')

plt.draw()

"""Task 2: Nominal dimension. Categories of videos"""

#Task 2

#Nominal dimension, categories of videos
print("Nominal dimension: Categories of videos. Unranked qualitative categorization of videos\n")

#Mode, 5 most common categories of videos


#CANADA
categoryDict = {}
for video in caVideos:
  if video[4] not in categoryDict:
    categoryDict[video[4]] = 1
  elif video[4] in categoryDict:
    categoryDict[video[4]] = categoryDict[video[4]] + 1


#print(len(caVideos))

top5DictCA = {
      "Entertainment": 13451,
      "News and Politics": 4159,
      "People and Blogs": 4105,
      "Comedy": 3773,
      "Music": 3731   
      
     }

print(categoryDict)

#"Other":  11662
#USA
categoryDict = {}
for video in usVideos:
  if video[4] not in categoryDict:
    categoryDict[video[4]] = 1
  elif video[4] in categoryDict:
    categoryDict[video[4]] = categoryDict[video[4]] + 1

#print(categoryDict)


top5DictUS = {
      "Entertainment": 9964,
      "Music": 6472,
      "Howto and Style": 4146,
      "Comedy": 3457,
      "People and Blogs": 3210
     }

#France
categoryDict = {}
for video in jpVideos:
  if video[4] not in categoryDict:
    categoryDict[video[4]] = 1
  elif video[4] in categoryDict:
    categoryDict[video[4]] = categoryDict[video[4]] + 1

#print(categoryDict)


top5DictJP = {
      "Entertainment": 9819,
      "People and Blogs": 5719,
      "Comedy": 4343,
      "Sports": 4342,
      "News and Politics": 3752    
     }


print("The top 5 categories of trending videos in Canada are: \n", top5DictCA, "\n")

print("The top 5 categories of trending videos in the United States are: \n", top5DictUS, "\n")

print("The top 5 categories of trending videos in France are: \n", top5DictJP, "\n")


#Pie chart would be good

#Canada
labels = list(top5DictCA.keys())

values = list(top5DictCA.values())

f1 = plt.pie(values, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)
#l1 = plt.legend(loc="upper left")
t1 = plt.title("Top 5 most commong categories of trending videos in Canada")


#USA
plt.figure()
labels2 = list(top5DictUS.keys())

values2 = list(top5DictUS.values())

f2 = plt.pie(values2, labels=labels2, autopct='%1.1f%%', shadow=True, startangle=90, colors=['#1f77b4', '#9467bd', '#c1a59d', '#d62728', '#2ca02c'])
#l2 = plt.legend(loc="upper left")
t2 = plt.title("Top 5 most common categories of trending videos in the US")

#Japan
plt.figure()
labels3 = list(top5DictJP.keys())

values3 = list(top5DictJP.values())

f3 = plt.pie(values3, labels=labels3, autopct='%1.1f%%', shadow=True, startangle=90, colors=['#1f77b4', '#2ca02c', '#d62728', 'yellow', '#ff7f0e'])
#l3 = plt.legend(loc="upper left")
t3 = plt.title("Top 5 most common categories of trending videos in France")

#Canada with other
plt.figure()

labels = list(top5DictCA.keys())

labels.append("Other")

values = list(top5DictCA.values())

values.append(len(caVideos) - sum(list(top5DictCA.values()))) 

f4 = plt.pie(values, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)
#l1 = plt.legend(loc="upper left")
t4 = plt.title("Top 5 most common categories and others")

plt.show()

"""Task 2: Ordinal dimension. Approval Rating (1-5)"""

#Ordinal dimension: Make my own ranking of videos rank based on like to dislike ratio?

#We can have ranking 1-5
#1 Heavily Disliked: Likes < Dislikes
#2 Disliked: Likes < 2*Dislikes
#3 Liked: Likes < 10*Dislikes
#4 Very Liked: Likes < 50*Dislikes
#5 Overwhelmingly Liked: Likes > 50*Dislikes

#Canadian:

rankingDictCA = {
    "1": 0,
    "2": 0,
    "3": 0,
    "4": 0,
    "5": 0,
}



for video in caVideos:
  likes = int(video[8])
  dislikes = int(video[9])  
  if likes < dislikes:
    rankingDictCA["1"] += 1
  elif likes < 2*dislikes:
    rankingDictCA["2"] += 1
  elif likes < 10*dislikes:
    rankingDictCA["3"] += 1
  elif likes < 50*dislikes:
    rankingDictCA["4"] += 1
  else :
    rankingDictCA["5"] += 1

print(rankingDictCA)

#US

rankingDictUS = {
    "1": 0,
    "2": 0,
    "3": 0,
    "4": 0,
    "5": 0,
}

for video in usVideos:
  likes = int(video[8])
  dislikes = int(video[9])  
  if likes < dislikes:
    rankingDictUS["1"] += 1
  elif likes < 2*dislikes:
    rankingDictUS["2"] += 1
  elif likes < 10*dislikes:
    rankingDictUS["3"] += 1
  elif likes < 50*dislikes:
    rankingDictUS["4"] += 1
  else :
    rankingDictUS["5"] += 1

#France

print(rankingDictUS)

rankingDictFR = {
    "1": 0,
    "2": 0,
    "3": 0,
    "4": 0,
    "5": 0,
}

for video in jpVideos:
  likes = int(video[8])
  dislikes = int(video[9])  
  if likes < dislikes:
    rankingDictFR["1"] += 1
  elif likes < 2*dislikes:
    rankingDictFR["2"] += 1
  elif likes < 10*dislikes:
    rankingDictFR["3"] += 1
  elif likes < 50*dislikes:
    rankingDictFR["4"] += 1
  else :
    rankingDictFR["5"] += 1

print(rankingDictFR)


#Median 

rankingsLong = []

for key in rankingDictCA:
  for i in range(rankingDictCA[key]):
    rankingsLong.append(int(key))

medianCA = rankingsLong[int(len(rankingsLong)/2)]

print("The median ranking of trending videos between 1-5 in Canada is: ", medianCA, "\n")


#Percentiles

#Canada

percentileCA = {
    "1": (rankingDictCA["1"]/len(caVideos))*100,
    "2": (rankingDictCA["2"]/len(caVideos) + rankingDictCA["1"]/len(caVideos))*100,
    "3": (rankingDictCA["3"]/len(caVideos) + rankingDictCA["2"]/len(caVideos) + rankingDictCA["1"]/len(caVideos))*100,
    "4": (rankingDictCA["4"]/len(caVideos) + rankingDictCA["3"]/len(caVideos) + rankingDictCA["2"]/len(caVideos) + rankingDictCA["1"]/len(caVideos))*100,
    "5": (rankingDictCA["5"]/len(caVideos) + rankingDictCA["4"]/len(caVideos) + rankingDictCA["3"]/len(caVideos) + rankingDictCA["2"]/len(caVideos) + rankingDictCA["1"]/len(caVideos))*100
}
#percentileCAround = [round(num, 4) for num in percentileCA]
print("The percentiles of each ranking in Canada is: \n", percentileCA, "\n")



#Bar graph of rankings
fig, ax = plt.subplots()
labels = list(rankingDictCA.keys())
values = list(rankingDictCA.values())
width = 0.25
x = np.arange(len(labels))


#b1 = ax.bar(range(len(rankingDictCA)), values)
#b3 = ax.bar(range(len(rankingDictUS)), list(rankingDictUS.values()))
b1 = ax.bar(x , values, width, label='Canada', color='r')
b3 = ax.bar(x + width, list(rankingDictUS.values()), width, label='US', color='b')
b4 = ax.bar(x + width*2,list(rankingDictFR.values()), width, label='France', color='y')


plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_color('#DDDDDD')
plt.gca().set_axisbelow(True)
plt.gca().yaxis.grid(True, color='#D3D3D3')
plt.gca().xaxis.grid(False)


x1 = plt.xticks(range(len(rankingDictCA)), ["Heavily Disliked", "Disliked", "Neutral", "Liked", "Very Liked"])
t1 = plt.title("Distribution of rankings of videos in Canada")
ax.legend()
ax.set_ylabel('Number of videos')

#Bar graph of Percentiles of rankings

plt.figure()


values = list(percentileCA.values())

b2 = plt.bar(range(len(rankingDictCA)), values, color='r')

for bar in b2:
  if(bar.get_height() >= 0):
      plt.gca().text(
      bar.get_x() + bar.get_width() / 2,
      bar.get_height() + 3,
      round(bar.get_height(), 1),
      horizontalalignment='center',
      color='black',
      weight='bold'
      )

plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_color('#DDDDDD')
plt.gca().set_axisbelow(True)
plt.gca().yaxis.grid(True, color='#D3D3D3')
plt.gca().xaxis.grid(False)

x2 = plt.xticks(range(len(rankingDictCA)), ["Heavily Disliked", "Disliked", "Neutral", "Liked", "Very Liked"])
t2 = plt.title("Percentiles of rankings of videos in Canada")
plt.ylabel('Percentile %')


#x3 = plt.xticks(range(len(rankingDictUS)), ["Heavily Disliked", "Disliked", "Neutral", "Liked", "Very Liked"])
#t3 = plt.title("Percentiles of rankings of videos in Canada")



"""Task 2: Interval dimension. Views."""

#Interval dimension: Views, views must always be above 0/ a few hundred due to Youtube's trending video algorithm relative to unique category. Therefore there is no absolute 0, therefore the ratio is somewhat meaningless as
#trending videos can imply have a few hundred views or millions repending on category!

print("Interval dimension: Number of views. There can never be no views, and therefore no absolute 0 \n")

#Mean, average amount of views on trending videos


#Canada
count = 0
smallest = 9999999999
largest = 0
totalCount = 0

allViews = []

for video in caVideos:
  totalCount = totalCount + int(video[7])
  count = count+1
  allViews.append(int(video[7]))
  if int(video[7]) < smallest:
    smallest = int(video[7])
  elif int(video[7]) > largest:
    largest = int(video[7])

meanViews = totalCount / count

smallestCA = smallest
largestCA = largest

#USA

count = 0
smallest = 9999999999
largest = 0
totalCount = 0
allViewsUS = []

for video in usVideos:
  totalCount = totalCount + int(video[7])
  count = count+1
  allViewsUS.append(int(video[7]))
  if int(video[7]) < smallest:
    smallest = int(video[7])
  elif int(video[7]) > largest:
    largest = int(video[7])

meanViewsUS = totalCount / count

smallestUS = smallest
largestUS = largest

#JAPAN

count = 0
smallest = 9999999999
largest = 0
totalCount = 0
allViewsJP = []

for video in jpVideos:
  totalCount = totalCount + int(video[7])
  count = count+1
  allViewsJP.append(int(video[7]))
  if int(video[7]) < smallest:
    smallest = int(video[7])
  elif int(video[7]) > largest:
    largest = int(video[7])

meanViewsJP = totalCount / count

smallestJP = smallest
largestJP = largest


print("The average(mean) number of views on Canadian trending Youtube videos is: ", int(meanViews), "\n")

print("The average(mean) number of views on US trending Youtube videos is: ", int(meanViewsUS), "\n")

print("The average(mean) number of views on France trending Youtube videos is: ", int(meanViewsJP), "\n")


#Variance, range of views between trending videos
#Do standard deviation instead

#print("The range of views on Canadian trending Youtube videos is: ", smallestCA, " to ", largestCA, "\n")
print("The variance of views in Canada is: ", statistics.variance(allViews))
#print("The range of views on US trending Youtube videos is: ", smallestUS, " to ", largestUS, "\n")
print("The variance of views in the US is: ", statistics.variance(allViewsUS))
#print("The range of views on Japan trending Youtube videos is: ", smallestJP, " to ", largestJP, "\n\n")
print("The variance of views in France is: ", statistics.variance(allViewsJP))

#Simple bar graph showing difference of average number of views between countries

labels = ["Canada", "US", "France"]
values = [meanViews, meanViewsUS, meanViewsJP]


b5 = plt.bar(range(len(values)), values)

for bar in b5:
  if(bar.get_height() >= 0):
      plt.gca().text(
      bar.get_x() + bar.get_width() / 2,
      bar.get_height() + 20000,
      round(bar.get_height(), 1),
      horizontalalignment='center',
      color='black',
      weight='bold'
      )

plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_color('#DDDDDD')
plt.gca().set_axisbelow(True)
plt.gca().yaxis.grid(True, color='#D3D3D3')
plt.gca().xaxis.grid(False)

plt.ylabel("Views")

plt.xticks(range(len(labels)), labels)


plt.gca().get_yaxis().get_major_formatter().set_scientific(False)

plt.title("Mean views on trending videos between countries")

b5[0].set_color('r')

b5[2].set_color('y')

plt.draw()


#Make a box plot with the three countries to demonstrate range and variance

plt.figure()



allViewsSample = random.sample(allViews, 50)

allViewsUSSample = random.sample(allViewsUS, 50)

allViewsJPSample = random.sample(allViewsJP, 50)

allViewsSampleF = [allViewsSample, allViewsUSSample, allViewsJPSample]

plt.boxplot(allViewsSampleF, vert=False)

plt.yticks(range(5), ["", "Canada", "USA", "France"])

plt.gca().get_xaxis().get_major_formatter().set_scientific(False)
plt.setp(plt.gca().get_xticklabels(), rotation=30, horizontalalignment='right')




plt.title("Boxplot of views on trending videos across countries")
#plt.boxplot(allViews, vert=False)

"""Task 2: Ratio dimension. Dislikes"""

#Ratio dimension: Dislikes, videos do not need dislikes to be trending, therefore there is a potential for a lowest value/absolute 0.
#The dislikes are also naturally ordered

print("Ratio dimension: Dislikes on videos. There can be 0 dislikes possibly giving this an absolute 0\n")


#Harmonic Mean, average amount of dislikes on a trending video.m

#CANADA
totalDislikes = 0
smallest = 9999999999
largest = 0
totalCount = 0
allDislikes = []

for video in caVideos:
  totalDislikes = totalDislikes + int(video[9])
  totalCount = totalCount + int(video[7])
  allDislikes.append(int(video[9]))
  if int(video[9]) < smallest:
    smallest = int(video[9])
  elif int(video[9]) > largest:
    largest = int(video[9])

meanDislikesCA = totalDislikes / len(caVideos)

totalDislikesCA = totalDislikes

totalCountCA = totalCount

smallestCA = smallest

largestCA = largest

#US
totalDislikes = 0
smallest = 9999999999
largest = 0
totalCount = 0
allDislikesUS = []

for video in usVideos:
  totalDislikes = totalDislikes + int(video[9])
  totalCount = totalCount + int(video[7])
  allDislikesUS.append(int(video[9]))
  if int(video[9]) < smallest:
    smallest = int(video[9])
  elif int(video[9]) > largest:
    largest = int(video[9])

meanDislikesUS = totalDislikes / len(caVideos)

totalDislikesUS = totalDislikes

totalCountUS = totalCount

smallestUS = smallest

largestUS = largest

#Japan
totalDislikes = 0
smallest = 9999999999
largest = 0
totalCount = 0
allDislikesJP = []

for video in jpVideos:
  totalDislikes = totalDislikes + int(video[9])
  totalCount = totalCount + int(video[7])
  allDislikesJP.append(int(video[9]))
  if int(video[9]) < smallest:
    smallest = int(video[9])
  elif int(video[9]) > largest:
    largest = int(video[9])

meanDislikesJP = totalDislikes / len(caVideos)

totalDislikesJP = totalDislikes

totalCountJP = totalCount

smallestJP = smallest

largestJP = largest

print("The average(mean) number of dislikes in Canada is: ", int(meanDislikesCA), " The average ratio of dislikes to views is: ", round(totalDislikesCA/totalCountCA,4), "thats 1 dislike for every ", round(int((totalCountCA/totalDislikesCA)),4), "views\n")

print("The average(mean) number of dislikes in US is: ", int(meanDislikesUS), " The average ratio of dislikes to views is: ", round(totalDislikesUS/totalCountUS,4), "thats 1 dislike for every ", round(int((totalCountUS/totalDislikesUS)),4), "views\n")

print("The average(mean) number of dislikes in France is: ", int(meanDislikesJP), " The average ratio of dislikes to views is: ", round(totalDislikesJP/totalCountJP,4), "thats 1 dislike for every ", round(int((totalCountJP/totalDislikesJP)),4), "views\n")


#Mode is fairly useless as dislikes vary greatly, range of values much more helpful
#Range:

print("The range of dislikes across all of the Canada trending videos is ", smallestCA, " minimum and ", largestCA, " maximum\n")

print("The range of dislikes across all of the US trending videos is ", smallestUS, " minimum and ", largestUS, " maximum\n")

print("The range of dislikes across all of the France trending videos is ", smallestJP, " minimum and ", largestJP, " maximum\n")

#Boxplot again?

allDislikes = random.sample(allDislikes,50)

allDislikesUS = random.sample(allDislikesUS,50)

allDislikesJP = random.sample(allDislikesJP,50)


allDislikesF = [allDislikes, allDislikesUS, allDislikesJP]

plt.figure()
plt.title("Boxplot of dislikes across countries")

_ = plt.boxplot(allDislikesF, vert=False)


_ = plt.yticks(range(4), ["", "Canada", "US", "France"])
plt.xlabel("Dislikes")

"""Export data as CSV:"""

#Export as CSV

"""Task 3: Interval Dimension"""

#Interval dimension: Views by month

#Finding Zscores
from sklearn.preprocessing import MinMaxScaler
from scipy.interpolate import make_interp_spline, BSpline


monthViews = []

for key in monthDict:
  monthViews.append(monthDict[key])

zscores = stats.zscore(monthViews)


#Min-Max standardization

scaler = MinMaxScaler()

monthViews2 = np.array(monthViews).reshape(-1,1)

scaler.fit(monthViews2)

normalized = scaler.transform(monthViews2)


print("ZScores of views by month: \n")
count = 0
for key in monthDict:
  print(key, ": ", round(zscores[count],4))
  count +=1

print("\nMin-Max normalization of views by month: \n")
count = 0
for key in monthDict:
  print(key, ": ", round(normalized[count][0],4))
  count +=1


#Graphing the results

xnew = np.linspace(1, 8, 300)
print(zscores)
spl  = make_interp_spline([1,2,3,4,5,6,7,8],zscores, k=3)
spl2  = make_interp_spline([1,2,3,4,5,6,7,8],normalized, k=3)

power_smooth = spl(xnew)
power_smoth2 = spl2(xnew)

plt.plot(xnew, power_smooth)

wowza = list(monthDict.keys())

wowza.insert(0,"")
plt.xticks(range(9), wowza)

plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_color('#DDDDDD')
plt.gca().set_axisbelow(True)
plt.gca().yaxis.grid(True, color='#D3D3D3')
plt.gca().xaxis.grid(False)

plt.title("ZScore standardization of views over time")
plt.ylabel("ZScore")
plt.xlabel("Month")
plt.setp(plt.gca().get_xticklabels(), rotation=30, horizontalalignment='right')


#plt.figure()
plt.figure()
plt.plot(xnew, power_smoth2)
plt.title("Min-Max normalized views over time")
plt.ylabel("Normalized Views 0-1")
plt.xlabel("Month")
plt.setp(plt.gca().get_xticklabels(), rotation=30, horizontalalignment='right')

wowza = list(monthDict.keys())

wowza.insert(0,"")
plt.xticks(range(9), wowza)

plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_color('#DDDDDD')
plt.gca().set_axisbelow(True)
plt.gca().yaxis.grid(True, color='#D3D3D3')
plt.gca().xaxis.grid(False)


plt.figure()

plt.plot(xnew, power_smooth, label='ZScore')
plt.plot(xnew, power_smoth2, label='Min-Max')

wowza = list(monthDict.keys())

wowza.insert(0,"")
plt.xticks(range(9), wowza)

plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_color('#DDDDDD')
plt.gca().set_axisbelow(True)
plt.gca().yaxis.grid(True, color='#D3D3D3')
plt.gca().xaxis.grid(False)


plt.title("Min-Max and ZScores for views over time")
plt.ylabel("Normalized Views 0-1")
plt.xlabel("Month")
plt.setp(plt.gca().get_xticklabels(), rotation=30, horizontalalignment='right')

plt.legend()

#ZScore density function



#plt.plot(monthViews)



"""Task 3: Ratio Dimension"""

#Ratio Dimension: Mean Like to dislike ratio by Category

#Finding ratio of likes and dislikes within categories

categoryRatio = {
    "Entertainment": 0,
    "Music": 0,
    "Comedy": 0,
    "News & Politics": 0,
    "People & Blogs": 0,
    "Howto & Style": 0,
    "Education": 0,
    "Pets & Animals": 0,
    "Film & Animation": 0,
}

categoryCount = {
    "Entertainment": 0,
    "Music": 0,
    "Comedy": 0,
    "News & Politics": 0,
    "People & Blogs": 0,
    "Howto & Style": 0,
    "Education": 0,
    "Pets & Animals": 0,
    "Film & Animation": 0,
    
}

for video in caVideos:
  if int(video[4]) == 24:
    categoryRatio["Entertainment"] += (int(video[8]) / (int(video[9])+1))
    categoryCount["Entertainment"] += 1
  elif int(video[4]) == 10:
    categoryRatio["Music"] = categoryRatio["Music"] + (int(video[8]) / (int(video[9])+1))
    #categoryRatio["Music"] += int(video[8]) / (int(video[9]+1))
    categoryCount["Music"] += 1
  elif int(video[4]) == 23:
    categoryRatio["Comedy"] += (int(video[8]) / (int(video[9])+1))
    categoryCount["Comedy"] += 1
  elif int(video[4]) == 25:
    categoryRatio["News & Politics"] += (int(video[8]) / (int(video[9])+1))
    categoryCount["News & Politics"] += 1
  elif int(video[4]) == 22:
    categoryRatio["People & Blogs"] += (int(video[8]) / (int(video[9])+1))
    categoryCount["People & Blogs"] += 1
  elif int(video[4]) == 26:
    categoryRatio["Howto & Style"] += (int(video[8]) / (int(video[9])+1))
    categoryCount["Howto & Style"] += 1
  elif int(video[4]) == 27:
    categoryRatio["Education"] += (int(video[8]) / (int(video[9])+1))
    categoryCount["Education"] += 1
  elif int(video[4]) == 15:
    categoryRatio["Pets & Animals"] += (int(video[8]) / (int(video[9])+1))
    categoryCount["Pets & Animals"] += 1
  elif int(video[4]) == 1:
    categoryRatio["Film & Animation"] += (int(video[8]) / (int(video[9])+1))
    categoryCount["Film & Animation"] += 1

for key in categoryRatio:
  categoryRatio[key] = categoryRatio[key] / categoryCount[key]

print(categoryRatio)


#ZScores:

ratioList = []

for key in categoryRatio:
  ratioList.append(categoryRatio[key])

zscores = stats.zscore(ratioList)


#Min-Max standardization:

scaler = MinMaxScaler()

ratioList2 = np.array(ratioList).reshape(-1,1)

scaler.fit(ratioList2)

normalized = scaler.transform(ratioList2)

print("ZScores of like/dislikes by category: \n")
count = 0
for key in categoryRatio:
  print(key, ": ", round(zscores[count],4))
  count+=1

print("\nMin-Max normalization of likes/dislikes by category-: \n")
count = 0
for key in categoryRatio:
  print(key, ": ", round(normalized[count][0],4))
  count+=1



xnew = np.linspace(1, 8, 300)
spl  = make_interp_spline([1,2,3,4,5,6,7,8,9],zscores, k=3)
spl2  = make_interp_spline([1,2,3,4,5,6,7,8,9],normalized, k=3)

power_smooth = spl(xnew)
power_smoth2 = spl2(xnew)

#plt.plot(xnew, power_smooth)
bars = plt.bar(range(len(zscores)), zscores)

plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_color('#DDDDDD')
plt.gca().set_axisbelow(True)
plt.gca().yaxis.grid(True, color='#D3D3D3')
plt.gca().xaxis.grid(False)

for bar in bars:
  if(bar.get_height() > 0):
      plt.gca().text(
      bar.get_x() + bar.get_width() / 2,
      bar.get_height() + 0.08,
      round(bar.get_height(), 1),
      horizontalalignment='center',
      color='black',
      weight='bold'
      )
  else:
    plt.gca().text(
      bar.get_x() + bar.get_width() / 2,
      bar.get_height()-0.2,
      round(bar.get_height(), 1),
      horizontalalignment='center',
      color='black',
      weight='bold'
      )

  
xaxis = list(categoryRatio.keys())
#xaxis.insert(0,"")
#xaxis.append()
plt.xticks(range(len(categoryRatio)), xaxis)
plt.title("ZScore standardization of like/dislike ratios by category")
plt.setp(plt.gca().get_xticklabels(), rotation=30, horizontalalignment='right')

plt.ylabel("ZScore")
plt.xlabel("Category")
#plt.figure()
plt.figure()
#plt.plot(xnew, power_smoth2)
#print(np.array(normalized).reshape(1,-1))




items = []
for val in normalized:
  items.append(val[0])
bars = plt.bar(range(len(zscores)), items)
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_color('#DDDDDD')
plt.gca().set_axisbelow(True)
plt.gca().yaxis.grid(True, color='#D3D3D3')
plt.gca().xaxis.grid(False)

for bar in bars:
  if(bar.get_height() >= 0):
      plt.gca().text(
      bar.get_x() + bar.get_width() / 2,
      bar.get_height() + .03,
      round(bar.get_height(), 1),
      horizontalalignment='center',
      color='black',
      weight='bold'
      )
plt.title("Min-Max normalized like/dislike ratios by category")
plt.ylabel("Normalized Ratios 0-1")
plt.xlabel("Category")
plt.setp(plt.gca().get_xticklabels(), rotation=30, horizontalalignment='right')
plt.xticks(range(len(categoryRatio)), xaxis)


plt.figure()

#Exporting as CSV