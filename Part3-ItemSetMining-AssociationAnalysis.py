# -*- coding: utf-8 -*-
"""Phase 3 Task 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XzOlf6i7By2SkhzH2MtrJWkKT6tgG4aT

Loading and processing data
"""

!pip install apyori


import csv
import matplotlib.pyplot as plt
import calendar
import numpy as np
import random
import statistics
import scipy.stats as stats

from sklearn.preprocessing import MinMaxScaler
from scipy.interpolate import make_interp_spline, BSpline

import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules


#Importing data

with open('CAvideos.csv', newline = '') as csvf:
  reader = csv.reader(csvf)
  caVideos = list(reader)



print(caVideos[1][2])

monthViews = []

#Removing labels from data
caVideosCopy = caVideos
header = caVideos.pop(0)

categories = ["0", "Film and Animation", "Autos and Vehicles", "3", "4", "5" , "6", "7", "8", "9", "Music", "10", "11", "12", "13", "14"
, "Pets and Animals", "16", "Sports", "Short Movies", "Travel and Events", "Gaming", "21", "People and Blogs" ,"Comedy" ,"Entertainment" , "News and Politics", "Howto and Style", "Education", "Science & Technology", "29", "Movies", "Anime/Animation", "Action/Adventure", "Classics", "Comedy", "Documentary", "Drama",
 "Family", "Foreign", "Horror", "Sci-Fi/Fantasy", "Thriller", "Shorts", "Shows", "Trailers", "45", "46", "47", "48", "49", "50"]

"""Data Pre-Processing and Discretization"""

#First lets sample the data to (1000) data points

sampledList = []

for i in range(1000):
  sampledList.append(caVideos[i*24])

toCsv = sampledList.copy()
toCsv.insert(0, header)

with open("217395609-215222938-215911555â€”T1Old.csv", "w+") as my_csv:
  csvWriter = csv.writer(my_csv,delimiter=',')
  csvWriter.writerows(toCsv)

#Lets cut out some unneccessary columns (id, tags, title, description, video error, and publish time) 
#Publish time, overlaps with trending date
#Id, title and description are just all basically unique ids as they will never match on multiple data points
#Video error is useless

for i in range(len(sampledList)):
  sampledList[i].pop(15)
  sampledList[i].pop(14)
  sampledList[i].pop(11)
  sampledList[i].pop(6)
  sampledList[i].pop(5)
  sampledList[i].pop(2)
  sampledList[i].pop(0)

  #Temp
  #sampledList[i].pop(8)
  #sampledList[i].pop(7)

#Making some items clearer


for i in range(len(sampledList)):

  if sampledList[i][7] == "False":
    sampledList[i][7] = "Comments Enabled"
  else:
        sampledList[i][7] = "Comments Disabled"

  if sampledList[i][8] == "False":
    sampledList[i][8] = "Ratings Enabled"
  else:
        sampledList[i][8] = "Ratings Disabled"

  sampledList[i][2] = categories[int(sampledList[i][2])]

for i in range(len(sampledList)):
  sampledList[i].pop(8)
  sampledList[i].pop(7)

"""Discretization"""

#Discretizing the data, 
#Trending Data should be discretized to month
#Views, likes, dislikes and Comment count can be split into ranges 

allViews = []
allLikes = []
allDislikes = []
allComments = []

for i in range(len(sampledList)):
  #Month, code carried over from previous part
  month = sampledList[i][0]
  month = month[len(month)-2:]
  
  monthName = calendar.month_name[int(month)]

  sampledList[i][1] = monthName

  #Views, split views into intervals of 
  #print(sampledList[i][3])

  allViews.append(int(sampledList[i][3]))
  allLikes.append(int(sampledList[i][4]))
  allDislikes.append(int(sampledList[i][5]))
  allComments.append(int(sampledList[i][6]))

#Split counts into equal size partitions for fairness
allViews.sort()

min = 0
startingIndex = int(len(allViews)/5)

for i in range(1,6):

  if i == 1:
    word = "(Very few "
  elif i == 2:
    word = "(Few "
  elif i == 3:
    word = "(Moderate "
  elif i == 4:
    word = "(Many "
  elif i == 5:
    word = "(Very Many "
  
  if i != 5:
    max = int(allViews[startingIndex])
  else:
    max = allViews[len(allViews)-1]


  for i in range(len(sampledList)):
    try:
      if int(sampledList[i][3]) <= max and int(sampledList[i][3]) > min:
        sampledList[i][3] = " " + str(min) + " to " + str(max) + word +  " views)"
    except:
      pass
  min = max
  startingIndex = startingIndex + 200


#Again for likes

allLikes.sort()

min = 0
startingIndex = int(len(allLikes)/5)

for i in range(1,6):

  if i == 1:
    word = "(Very few "
  elif i == 2:
    word = "(Few "
  elif i == 3:
    word = "(Moderate "
  elif i == 4:
    word = "(Many "
  elif i == 5:
    word = "(Very Many "

  if i != 5:
    max = int(allLikes[startingIndex])
  else:
    max = allLikes[len(allLikes)-1]


  for i in range(len(sampledList)):
    try:
      if int(sampledList[i][4]) <= max and int(sampledList[i][4]) > min:
        sampledList[i][4] = " " + str(min) + " to " + str(max) + word + " likes)"
    except:
      pass
  min = max
  startingIndex = startingIndex + 200


#Again for dislikes

allDislikes.sort()

min = 0
startingIndex = int(len(allDislikes)/5)

for i in range(1,6):

  if i == 1:
    word = "(Very few "
  elif i == 2:
    word = "(Few "
  elif i == 3:
    word = "(Moderate "
  elif i == 4:
    word = "(Many "
  elif i == 5:
    word = "(Very Many "

  if i != 5:
    max = int(allDislikes[startingIndex])
  else:
    max = allDislikes[len(allDislikes)-1]


  for i in range(len(sampledList)):
    try:
      if int(sampledList[i][5]) <= max and int(sampledList[i][5]) > min:
        sampledList[i][5] = " " + str(min) + " to " + str(max) + word + " dislikes)"
    except:
      pass
  min = max
  startingIndex = startingIndex + 200



#Lastly for Comments

allComments.sort()

min = 0
startingIndex = int(len(allComments)/5)

for i in range(len(sampledList)):

  

  try:
    if int(sampledList[i][5]) == 0:
      sampledList[i][5] = "no comments"
  except:
    pass


for i in range(1,6):

  if i == 1:
    word = "(Very few "
  elif i == 2:
    word = "(Few "
  elif i == 3:
    word = "(Moderate "
  elif i == 4:
    word = "(Many "
  elif i == 5:
    word = "(Very Many "

  if i != 5:
    max = int(allComments[startingIndex])
  else:
    max = allComments[len(allComments)-1]


  for i in range(len(sampledList)):

    

    try:
      if int(sampledList[i][6]) <= max and int(sampledList[i][6]) > min:
        sampledList[i][6] = " " + str(min) + " to " + str(max) + word + " comments)"
    except:
      pass
  min = max
  startingIndex = startingIndex + 200



print(sampledList)

"""Now to find the ten most frequent item sets:"""

#Use transaction encoder
tr = TransactionEncoder()
tr_arr = tr.fit(sampledList).transform(sampledList)
df = pd.DataFrame(tr_arr, columns=tr.columns_)
df

#Using Apriori
frequent_itemsets = apriori(df, min_support = 0.0601, use_colnames = True)
frequent_itemsets

"""Create Association Rules, Here we use one method which doesn't provide """

rules = association_rules(frequent_itemsets, metric="support", min_threshold=0.06)
rules.sort_values("support",ascending=False)
rules

"""Create Assosciation rules (Alternative Method, not important)"""

from apyori import apriori as ap

sampledListCopy = sampledList
sampledListCopy.insert(0, ["Trending Month", "Channel", "Category", "Views", "Likes", "Dislikes", "Comments"])

association_rules2 = ap(sampledListCopy, min_support = 0.06)
results = list(association_rules2)
top10Rules = [48, 33, 49, 71, 85, 89, 76, 78, 73]

broolz = []

for i in top10Rules:
  broolz.append(results[i])

#results
print(results[3])

for item in broolz:

  pair = item[0]
  items = [x for x in pair]
  print("Rule: " + items[0] + " -> " + items[1])

  print("Confidence: " + str(item[2][0][2]))

  print("Lift: ")

  print("==============================")

"""Calculating measures of interest:"""

#First rule, {Very Many Views, Very Many Dislike} -> {Very Many Likes}


N = 1000
f11 = 0
f1plus = 0
fplus1 = 0
f10 = 0
f01 = 0
f0plus = 0
fplus0 = 0
f00 = 0


antedecent = "Very Many  views"
consequent = "Very Many  likes"

for video in sampledList:
  if antedecent in video[3] and consequent in video[4]:
    f11 = f11 + 1
    fplus1 = fplus1 + 1
    f1plus += 1
  elif antedecent in video[3] and consequent not in video[4]:
    f10 = f10 + 1
    f1plus += 1
    fplus0 += 1
  elif antedecent not in video[3] and consequent in video[4]:
    f01 += 1
    fplus1 +=1
    f0plus +=1
  else:
    f00 += 1
    fplus0 += 1
    f0plus += 1



interest = (N*f11) / (f1plus*fplus1)

shapiro = (f11/N) - (f1plus*fplus1)/N**2

oddsRatio = (f11*f00) / (f10*f01)

jaccard = f11/(f1plus + fplus1 - f11)

cosine = f11 / ((f1plus*fplus1)**0.5)

print("Rule 1: {Very Many Views} -> {Very Many Likes}\n")

print("Piatetsky-Shaprio (PS): " , shapiro, "\n")

print("Odds Ratio (a): " , oddsRatio, "\n")

print("Jaccard (?): " , jaccard, "\n")

print("Cosine (IS): ", cosine, "\n")

print("=====================================\n")

#Second rule, {Very many Comments} -> {Very many Likes}

N = 1000
f11 = 0
f1plus = 0
fplus1 = 0
f10 = 0
f01 = 0
f0plus = 0
fplus0 = 0
f00 = 0


antedecent = "Very Many  comments"
consequent = "Very Many  likes"

for video in sampledList:
  if antedecent in video[6] and consequent in video[4]:
    f11 = f11 + 1
    fplus1 = fplus1 + 1
    f1plus += 1
  elif antedecent in video[6] and consequent not in video[4]:
    f10 = f10 + 1
    f1plus += 1
    fplus0 += 1
  elif antedecent not in video[6] and consequent in video[4]:
    f01 += 1
    fplus1 +=1
    f0plus +=1
  else:
    f00 += 1
    fplus0 += 1
    f0plus += 1



interest = (N*f11) / (f1plus*fplus1)

shapiro = (f11/N) - (f1plus*fplus1)/N**2

oddsRatio = (f11*f00) / (f10*f01)

jaccard = f11/(f1plus + fplus1 - f11)

cosine = f11 / ((f1plus*fplus1)**0.5)

print("Rule 2: {Very many Comments} -> {Very many Likes}\n")

print("Piatetsky-Shaprio (PS): " , shapiro, "\n")

print("Odds Ratio (a): " , oddsRatio, "\n")

print("Jaccard (?): " , jaccard, "\n")

print("Cosine (IS): ", cosine, "\n")

print("=====================================\n")



#Third rule, {Very Many Views} -> {Very Many Dislikes}

N = 1000
f11 = 0
f1plus = 0
fplus1 = 0
f10 = 0
f01 = 0
f0plus = 0
fplus0 = 0
f00 = 0


antedecent = "Very Many  views"
consequent = "Very Many  dislikes"

for video in sampledList:
  if antedecent in video[3] and consequent in video[5]:
    f11 = f11 + 1
    fplus1 = fplus1 + 1
    f1plus += 1
  elif antedecent in video[3] and consequent not in video[5]:
    f10 = f10 + 1
    f1plus += 1
    fplus0 += 1
  elif antedecent not in video[3] and consequent in video[5]:
    f01 += 1
    fplus1 +=1
    f0plus +=1
  else:
    f00 += 1
    fplus0 += 1
    f0plus += 1



interest = (N*f11) / (f1plus*fplus1)

shapiro = (f11/N) - (f1plus*fplus1)/N**2

oddsRatio = (f11*f00) / (f10*f01)

jaccard = f11/(f1plus + fplus1 - f11)

cosine = f11 / ((f1plus*fplus1)**0.5)

print("Rule 3: {Very Many Views} -> {Very Many Dislikes}\n")

print("Piatetsky-Shaprio (PS): " , shapiro, "\n")

print("Odds Ratio (a): " , oddsRatio, "\n")

print("Jaccard (?): " , jaccard, "\n")

print("Cosine (IS): ", cosine, "\n")

print("=====================================\n")



#Fourth rule, {Very few Dislikes} -> {Very few Views}

N = 1000
f11 = 0
f1plus = 0
fplus1 = 0
f10 = 0
f01 = 0
f0plus = 0
fplus0 = 0
f00 = 0


antedecent = "Very few  dislikes"
consequent = "Very few  views"

for video in sampledList:
  if antedecent in video[5] and consequent in video[3]:
    f11 = f11 + 1
    fplus1 = fplus1 + 1
    f1plus += 1
  elif antedecent in video[5] and consequent not in video[3]:
    f10 = f10 + 1
    f1plus += 1
    fplus0 += 1
  elif antedecent not in video[5] and consequent in video[3]:
    f01 += 1
    fplus1 +=1
    f0plus +=1
  else:
    f00 += 1
    fplus0 += 1
    f0plus += 1



interest = (N*f11) / (f1plus*fplus1)

shapiro = (f11/N) - (f1plus*fplus1)/N**2

oddsRatio = (f11*f00) / (f10*f01)

jaccard = f11/(f1plus + fplus1 - f11)

cosine = f11 / ((f1plus*fplus1)**0.5)

print("Rule 4: {Very few Dislikes} -> {Very few Views}\n")

print("Piatetsky-Shaprio (PS): " , shapiro, "\n")

print("Odds Ratio (a): " , oddsRatio, "\n")

print("Jaccard (?): " , jaccard, "\n")

print("Cosine (IS): ", cosine, "\n")

print("=====================================\n")


#Fifth rule, {Very Many Dislikes} -> {Very many Likes}

N = 1000
f11 = 0
f1plus = 0
fplus1 = 0
f10 = 0
f01 = 0
f0plus = 0
fplus0 = 0
f00 = 0


antedecent = "Very Many  dislikes"
consequent = "Very Many  likes"

for video in sampledList:
  if antedecent in video[5] and consequent in video[4]:
    f11 = f11 + 1
    fplus1 = fplus1 + 1
    f1plus += 1
  elif antedecent in video[5] and consequent not in video[4]:
    f10 = f10 + 1
    f1plus += 1
    fplus0 += 1
  elif antedecent not in video[5] and consequent in video[4]:
    f01 += 1
    fplus1 +=1
    f0plus +=1
  else:
    f00 += 1
    fplus0 += 1
    f0plus += 1



interest = (N*f11) / (f1plus*fplus1)

shapiro = (f11/N) - (f1plus*fplus1)/N**2

oddsRatio = (f11*f00) / (f10*f01)

jaccard = f11/(f1plus + fplus1 - f11)

cosine = f11 / ((f1plus*fplus1)**0.5)

print("Rule 5: {Very Many Dislikes} -> {Very many Likes}\n")

print("Piatetsky-Shaprio (PS): " , shapiro, "\n")

print("Odds Ratio (a): " , oddsRatio, "\n")

print("Jaccard (?): " , jaccard, "\n")

print("Cosine (IS): ", cosine, "\n")

print("=====================================\n")

"""kmeans"""

for i in range(len(sampledList)):
  sampledList[i].pop(0)

sampledList[0][0] = "Trending Month"
with open("217395609-215222938-215911555â€”T1New.csv", "w+") as my_csv:
  csvWriter = csv.writer(my_csv,delimiter=',')
  csvWriter.writerows(sampledListCopy)