# -*- coding: utf-8 -*-
"""Phase 3 Task 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
"""

# -*- coding: utf-8 -*-
!pip install kneed



import csv
from email import header
from hashlib import new
import matplotlib.pyplot as plt
import calendar
import numpy as np
import random
import statistics
import scipy.stats as stats
from sklearn.decomposition import PCA
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.metrics.pairwise import cosine_similarity
from scipy.spatial.distance import mahalanobis
import scipy as sp
from kneed import KneeLocator
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler



# reading the dataset
df= pd.read_csv('CAvideos.csv', low_memory=False)

# exporting the orignal csv 
df.to_csv('217395609-215222938-215911555—T2Org.csv')



# Data preprocessing 

df.drop('title', axis=1, inplace=True)
df.drop('channel_title', axis=1, inplace=True)
df.drop('video_id', axis=1, inplace=True)
df.drop('publish_time', axis=1, inplace=True)
df.drop('tags', axis=1, inplace=True)
df.drop('thumbnail_link', axis=1, inplace=True)
df.drop('comments_disabled', axis=1, inplace=True)
df.drop('ratings_disabled', axis=1, inplace=True)
df.drop('video_error_or_removed', axis=1, inplace=True)
df.drop('description', axis=1, inplace=True)
df.drop('trending_date', axis=1, inplace=True)
df.drop('category_id', axis=1, inplace=True)
df.drop('views', axis=1, inplace=True)
df.drop('dislikes', axis=1, inplace=True)

# exporting the dataframe after extracting useful data

df.to_csv('217395609-215222938-215911555—T2Mod.csv')




scaledFeatures = StandardScaler().fit_transform(df)

 # k=3 #
print('')
kmeans = KMeans(init="random", n_clusters=3, n_init=10, max_iter=300, random_state=42)
kmeans.fit(scaledFeatures)
print("Kmeans(k=3) Interia: ",kmeans.inertia_)
print("Kmeans(k=3) centeroid locations: ", kmeans.cluster_centers_)
print("Kmeans(k=3) iterations required: ", kmeans.n_iter_)
print("First 5 predicted labels(k=3): ", kmeans.labels_)

 # k=4 #
print('')

kmeans = KMeans(init="random", n_clusters=4, n_init=10, max_iter=300, random_state=42)
kmeans.fit(scaledFeatures)
print("Kmeans(k=4) Interia: ",kmeans.inertia_)
print("Kmeans(k=4) centeroid locations: ", kmeans.cluster_centers_)
print("Kmeans(k=4) iterations required: ", kmeans.n_iter_)
print("First 5 predicted labels(k=4): ", kmeans.labels_)

 # k=5 #

print('')
kmeans = KMeans(init="random", n_clusters=5, n_init=10, max_iter=300, random_state=42)
kmeans.fit(scaledFeatures)
print("Kmeans(k=5) Interia: ",kmeans.inertia_)
print("Kmeans(k=5) centeroid locations: ", kmeans.cluster_centers_)
print("Kmeans(k=5) iterations required: ", kmeans.n_iter_)
print("First 5 predicted labels(k=5): ", kmeans.labels_)

# SSE #
kmeans_kwargs = KMeans(init="random", n_init=10, max_iter=300, random_state=42)
sse= []

for k in range(3, 6):
    kmeans= KMeans(init="random", n_clusters=k, n_init=10, max_iter=300, random_state=42)
    kmeans.fit(scaledFeatures)
    sse.append(kmeans.inertia_)

plt.style.use("fivethirtyeight")
plt.plot(range(3,6), sse)
plt.xticks(range(3,6))
plt.xlabel("No. of clusters")
plt.ylabel("SSE")
plt.show()


kl= KneeLocator(range(3,6), sse, curve="convex", direction="decreasing")
print('')
print("Lowest SSE: ", kl.elbow)

# Class labels with k=5 #
kmeans = KMeans(init="random", n_clusters=5, n_init=10, max_iter=300, random_state=42)
kmeans.fit(scaledFeatures)
df['label']= kmeans.labels_

df.to_csv('217395609-215222938-215911555—T2Class.csv')